@page
@model IndexModel
@{
    ViewData["Title"] = "سیستم نظارت کارخانه هوشمند";
}

<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Vazirmatn:wght@100..900&display=swap" rel="stylesheet">
    <link href="~/css/site.css" rel="stylesheet" />
    <link href="~/css/dashboard.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
</head>
<body>
    <div class="header">
        <h1>🏭 سیستم نظارت کارخانه هوشمند صنعتی</h1>
        <div class="status-bar">
            <div class="status-item status-online" id="systemStatus">
                <span>🟢 ONLINE</span>
            </div>
            <div class="status-item status-automatic" id="systemMode">
                <span>🤖 AUTOMATIC MODE</span>
            </div>
            <div class="status-item" id="lastUpdate">
                <span id="timestamp">⏰ آخرین بروزرسانی: --:--:--</span>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Warning Lights Section -->
        <div class="warning-lights">
            <div class="warning-light">
                <div class="light-indicator off" id="warningLight">
                </div>
                <div class="light-label">💡 چراغ هشدار عمومی</div>
                <div class="warning-messages" id="warningMessages">
                    <div style="text-align: center; color: #666;">بدون هشدار</div>
                </div>
            </div>
            
            <div class="warning-light">
                <div class="light-indicator off" id="alarmLight">
                </div>
                <div class="light-label">🚨 آژیر و چراغ خطر اصلی</div>
                <div class="alarm-messages" id="alarmMessages">
                    <div style="text-align: center; color: #666;">وضعیت عادی</div>
                </div>
            </div>
        </div>

        <!-- Dashboard Grid -->
        <div class="dashboard-grid">
            <!-- Temperature & Environmental -->
            <div class="card">
                <div class="card-header">
                    <div class="card-icon">🌡️</div>
                    <div class="card-title">دما و محیط زیست</div>
                </div>
                <div class="sensor-grid" id="temperatureGrid">
                    <!-- Will be populated by JavaScript -->
                </div>
                <div class="chart-container">
                    <canvas id="temperatureChart"></canvas>
                </div>
            </div>

            <!-- Safety Sensors -->
            <div class="card">
                <div class="card-header">
                    <div class="card-icon">⚠️</div>
                    <div class="card-title">سنسورهای ایمنی</div>
                </div>
                <div class="sensor-grid" id="safetyGrid">
                    <!-- Will be populated by JavaScript -->
                </div>
                <div class="chart-container">
                    <canvas id="safetyChart"></canvas>
                </div>
            </div>

            <!-- Production Line -->
            <div class="card">
                <div class="card-header">
                    <div class="card-icon">🏭</div>
                    <div class="card-title">خط تولید</div>
                </div>
                <div class="sensor-grid" id="productionGrid">
                    <!-- Will be populated by JavaScript -->
                </div>
                <div class="chart-container">
                    <canvas id="productionChart"></canvas>
                </div>
            </div>

            <!-- Electrical Systems -->
            <div class="card">
                <div class="card-header">
                    <div class="card-icon">⚡</div>
                    <div class="card-title">سیستم‌های برقی</div>
                </div>
                <div class="sensor-grid" id="electricalGrid">
                    <!-- Will be populated by JavaScript -->
                </div>
                <div class="chart-container">
                    <canvas id="electricalChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Factory Layout -->
        <div class="factory-layout">
            <div class="card-header">
                <div class="card-icon">🏗️</div>
                <div class="card-title">نقشه کارخانه و موقعیت سنسورها</div>
            </div>
            <div class="layout-grid" id="factoryLayout">
                <!-- Will be populated by JavaScript -->
            </div>
        </div>

        <div class="timestamp" id="fullTimestamp">
            آخرین بروزرسانی: --
        </div>
    </div>

    <script>
        // Global variables
        let connection;
        let charts = {};
        let sensorData = {};
        let sensorLocations = [];

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            initializeSignalR();
            loadSensorLocations();
            loadCurrentData();
            initializeCharts();
        });

        // SignalR Connection
        async function initializeSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/sensorhub")
                .build();

            connection.start().then(function () {
                console.log("SignalR Connected");
            }).catch(function (err) {
                console.error("SignalR Connection Error: ", err);
            });

            connection.on("SensorDataUpdate", function (data) {
                updateDashboard(data);
            });
        }

        // Load sensor locations
        async function loadSensorLocations() {
            try {
                const response = await fetch('/api/sensor/locations');
                const result = await response.json();
                if (result.success) {
                    sensorLocations = result.data;
                    createFactoryLayout();
                }
            } catch (error) {
                console.error('Error loading sensor locations:', error);
            }
        }

        // Load current data
        async function loadCurrentData() {
            try {
                const response = await fetch('/api/sensor/current');
                const result = await response.json();
                if (result.success) {
                    updateDashboard(result.data);
                }
            } catch (error) {
                console.error('Error loading current data:', error);
            }
        }

        // Update dashboard with new data
        function updateDashboard(data) {
            sensorData = data;
            updateSensorGrids();
            updateWarningLights();
            updateCharts();
            updateTimestamp();
        }

        // Update sensor grids
        function updateSensorGrids() {
            const categories = {
                temperature: ['Furnace_Temp', 'Env_Humid', 'Light_Level'],
                safety: ['Gas_Methane', 'Gas_CO', 'Tank_Pressure', 'Flame_Status', 'Water_Leak'],
                production: ['Machine_Sound', 'Conveyor_Dist', 'Gate_Status', 'E_Stop_Button', 'Coolant_Valve'],
                electrical: ['Main_Current', 'Engine_Vibe', 'Input_Voltage']
            };

            Object.keys(categories).forEach(category => {
                const grid = document.getElementById(category + 'Grid');
                if (grid) {
                    grid.innerHTML = '';
                    categories[category].forEach(sensorKey => {
                        const sensor = sensorLocations.find(s => s.key === sensorKey);
                        if (sensor) {
                            const value = sensorData[sensorKey] || 0;
                            const sensorElement = createSensorElement(sensor, value);
                            grid.appendChild(sensorElement);
                        }
                    });
                }
            });
        }

        // Create sensor element
        function createSensorElement(sensor, value) {
            const div = document.createElement('div');
            div.className = 'sensor-item';
            div.style.setProperty('--sensor-color', sensor.color);
            
            let status = '';
            let statusClass = '';
            
            if (sensor.maxSafe !== null && value > sensor.maxSafe) {
                status = '⚠️';
                statusClass = 'danger';
            } else if (sensor.minSafe !== null && value < sensor.minSafe) {
                status = '⚠️';
                statusClass = 'warning';
            } else {
                status = '✅';
                statusClass = 'normal';
            }

            div.innerHTML = `
                <div style="font-size: 1.5rem;">${sensor.icon}</div>
                <div class="sensor-value ${statusClass}">${value}</div>
                <div class="sensor-name">${sensor.name}</div>
                <div class="sensor-unit">${sensor.unit} ${status}</div>
            `;
            
            return div;
        }

        // Update warning lights
        function updateWarningLights() {
            const warningLight = document.getElementById('warningLight');
            const alarmLight = document.getElementById('alarmLight');
            const warningMessages = document.getElementById('warningMessages');
            const alarmMessages = document.getElementById('alarmMessages');

            // Update warning light
            if (sensorData.warning_LED || sensorData.activeWarnings?.length > 0) {
                warningLight.className = 'light-indicator warning-on';
                warningMessages.innerHTML = sensorData.activeWarnings?.map(msg => 
                    `<div class="message-item">${msg}</div>`
                ).join('') || '<div class="message-item">هشدار فعال</div>';
            } else {
                warningLight.className = 'light-indicator off';
                warningMessages.innerHTML = '<div style="text-align: center; color: #666;">بدون هشدار</div>';
            }

            // Update alarm light
            if (sensorData.alarm_System || sensorData.activeAlarms?.length > 0) {
                alarmLight.className = 'light-indicator alarm-on';
                alarmMessages.innerHTML = sensorData.activeAlarms?.map(msg => 
                    `<div class="message-item">${msg}</div>`
                ).join('') || '<div class="message-item">آلارم فعال</div>';
            } else {
                alarmLight.className = 'light-indicator off';
                alarmMessages.innerHTML = '<div style="text-align: center; color: #666;">وضعیت عادی</div>';
            }
        }

        // Initialize charts
        function initializeCharts() {
            const chartConfigs = {
                temperatureChart: {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: [{
                            label: 'دمای کوره (°C)',
                            data: [],
                            borderColor: '#FF6B6B',
                            backgroundColor: 'rgba(255, 107, 107, 0.1)',
                            tension: 0.4
                        }]
                    },
                    options: getChartOptions('دما و محیط زیست')
                },
                safetyChart: {
                    type: 'bar',
                    data: {
                        labels: ['گاز متان', 'مونوکسید کربن', 'فشار مخزن'],
                        datasets: [{
                            label: 'سطح خطر',
                            data: [0, 0, 0],
                            backgroundColor: ['#FF8E53', '#A8E6CF', '#98D8C8']
                        }]
                    },
                    options: getChartOptions('سنسورهای ایمنی')
                },
                productionChart: {
                    type: 'doughnut',
                    data: {
                        labels: ['صدای ماشین‌آلات', 'فاصله نوار نقاله', 'شیر خنک‌کننده'],
                        datasets: [{
                            data: [0, 0, 0],
                            backgroundColor: ['#DDA0DD', '#F8C471', '#76D7C4']
                        }]
                    },
                    options: getChartOptions('خط تولید')
                },
                electricalChart: {
                    type: 'radar',
                    data: {
                        labels: ['جریان اصلی', 'لرزش موتور', 'ولتاژ ورودی'],
                        datasets: [{
                            label: 'سیستم‌های برقی',
                            data: [0, 0, 0],
                            borderColor: '#F7DC6F',
                            backgroundColor: 'rgba(247, 220, 111, 0.2)'
                        }]
                    },
                    options: getChartOptions('سیستم‌های برقی')
                }
            };

            Object.keys(chartConfigs).forEach(chartId => {
                const ctx = document.getElementById(chartId);
                if (ctx) {
                    charts[chartId] = new Chart(ctx, chartConfigs[chartId]);
                }
            });
        }

        // Get chart options
        function getChartOptions(title) {
            return {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: title,
                        font: {
                            family: 'Vazirmatn',
                            size: 16,
                            weight: 'bold'
                        }
                    },
                    legend: {
                        labels: {
                            font: {
                                family: 'Vazirmatn'
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            font: {
                                family: 'Vazirmatn'
                            }
                        }
                    },
                    y: {
                        ticks: {
                            font: {
                                family: 'Vazirmatn'
                            }
                        }
                    }
                }
            };
        }

        // Update charts
        function updateCharts() {
            if (charts.temperatureChart) {
                const now = new Date().toLocaleTimeString('fa-IR');
                charts.temperatureChart.data.labels.push(now);
                charts.temperatureChart.data.datasets[0].data.push(sensorData.furnace_Temp || 0);
                
                if (charts.temperatureChart.data.labels.length > 20) {
                    charts.temperatureChart.data.labels.shift();
                    charts.temperatureChart.data.datasets[0].data.shift();
                }
                charts.temperatureChart.update();
            }

            if (charts.safetyChart) {
                charts.safetyChart.data.datasets[0].data = [
                    sensorData.gas_Methane || 0,
                    sensorData.gas_CO || 0,
                    sensorData.tank_Pressure || 0
                ];
                charts.safetyChart.update();
            }

            if (charts.productionChart) {
                charts.productionChart.data.datasets[0].data = [
                    sensorData.machine_Sound || 0,
                    sensorData.conveyor_Dist || 0,
                    sensorData.coolant_Valve || 0
                ];
                charts.productionChart.update();
            }

            if (charts.electricalChart) {
                charts.electricalChart.data.datasets[0].data = [
                    sensorData.main_Current || 0,
                    sensorData.engine_Vibe || 0,
                    sensorData.input_Voltage || 0
                ];
                charts.electricalChart.update();
            }
        }

        // Create factory layout
        function createFactoryLayout() {
            const layout = document.getElementById('factoryLayout');
            if (!layout) return;

            const areas = {};
            sensorLocations.forEach(sensor => {
                if (!areas[sensor.area]) {
                    areas[sensor.area] = [];
                }
                areas[sensor.area].push(sensor);
            });

            layout.innerHTML = '';
            Object.keys(areas).forEach(areaName => {
                const areaDiv = document.createElement('div');
                areaDiv.className = 'area-section';
                
                const title = document.createElement('div');
                title.className = 'area-title';
                title.textContent = areaName;
                
                const sensorsDiv = document.createElement('div');
                sensorsDiv.className = 'area-sensors';
                
                areas[areaName].forEach(sensor => {
                    const sensorDiv = document.createElement('div');
                    sensorDiv.className = 'area-sensor';
                    sensorDiv.style.setProperty('--sensor-color', sensor.color);
                    sensorDiv.innerHTML = `
                        <span>${sensor.icon}</span>
                        <span>${sensor.name}</span>
                    `;
                    sensorsDiv.appendChild(sensorDiv);
                });
                
                areaDiv.appendChild(title);
                areaDiv.appendChild(sensorsDiv);
                layout.appendChild(areaDiv);
            });
        }

        // Update timestamp
        function updateTimestamp() {
            const now = new Date();
            const persianTime = now.toLocaleString('fa-IR');
            
            document.getElementById('timestamp').textContent = `⏰ آخرین بروزرسانی: ${persianTime}`;
            document.getElementById('fullTimestamp').textContent = `آخرین بروزرسانی: ${persianTime}`;
        }

        // Update every 30 seconds
        setInterval(loadCurrentData, 30000);
    </script>
</body>
</html>